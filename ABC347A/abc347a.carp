(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
    nums))

(defn solve [&a len i]
  (if (< i len)
    (do
      (let [num (Array.nth a i)]
        (print &(Int.str num))
        (println ""))
      (solve a len (inc i)))))

(defn main []
  (let [a (getnums)
        len 5]
    (solve a len 0)))

(main)


---

(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
    nums))

(defn solve [a len i]
  (if (< i len)
    (do
      (let [num (Array.nth &a i)]
        (print &(Int.str num))
        (solve a len (inc i))
      )
    )
  )
)


(defn main []
  (let [a (getnums)
        len 5]
    (solve a len 0)))

(main)

---

(use IO)
(use String)
(use Int)
(use Array)


(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)


(defn solve [n k a]
  (let [ 
        ; am (Maybe.unsafe-from a)
        ; bm (Maybe.unsafe-from b)
        ; aa (Maybe.unsafe-from am)
        ; bb (Maybe.unsafe-from bm)
         ah_ (Maybe.unsafe-from (first &a))
         at_ (Maybe.unsafe-from (last &a))
         ah (Maybe.unsafe-from ah_)
         at (Maybe.unsafe-from at_)
        ]
  ; (/ (- aa 1) bb)
  ; (+ aa bb)
   (do
     (if (= 0 (mod ah k))
         (print &(Int.str (/ ah k)))
     )
     (solve (- n 1) k ht)
  )
  )
)

(defn main []
  (let [
        nk (getnums)
        AT (solve (first &nk) (last &nk))
        n_ (Maybe.unsafe-from (first &nk))
        k_ (Maybe.unsafe-from (last &nk))
        n  (Maybe.unsafe-from n_)
        k  (Maybe.unsafe-from k_)
        a (getnums)
       ]
  (do
    (solve (n k &a))
    (print &(Int.str (+ n k)))
  )
  )
)


--
(use IO)
(use String)
(use Int)
(use Array)

(defn getnum []
  (let [ss (get-line)
        s (chomp &ss)]
    (Maybe.unsafe-from (from-string &s))
  )
)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)

(defn solve [a b]
  (let [ am (Maybe.unsafe-from a)
         bm (Maybe.unsafe-from b)
         aa (Maybe.unsafe-from am)
         bb (Maybe.unsafe-from bm) ]
   (/ (- aa 1) bb)
  )
)

(defn main []
  (let [
        tmp (getnums)
        AT (solve (first &tmp) (last &tmp))
       ]
  (do
     (print &(Int.str AT))
  )
  )
)

--
(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)

(defn main []
  (let [
        tmp (getnums)
        a_ (Maybe.unsafe-from (first &tmp))
        a (Maybe.unsafe-from a_)
        b_ (Maybe.unsafe-from (last &tmp))
        b (Maybe.unsafe-from b_)
       ]
  (do
     (print &(Int.str (+ a b)))
  )
  )
)

1 2 5 4 3 -> 4

---
(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)

(defn main []
  (let [
        tmp (getnums)
        a_ (Maybe.unsafe-from (first &tmp))
        a (Maybe.unsafe-from a_)
        b_ (Maybe.unsafe-from (last &tmp))
        b (Maybe.unsafe-from b_)
        c_ (Maybe.unsafe-from (nth &tmp 2))
        c (Maybe.unsafe-from c_)
       ]
  (do
    (print &(Int.str (+ a b)))
    (println " ")
    (print &(Int.str (+ c 0)))
     
  )
  )
)
1 2 5 4 3
->
4
5
--

(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)

(defn main []
  (let [
        nk (getnums)
        n_ (Maybe.unsafe-from (first &nk))
        n (Maybe.unsafe-from n_)
        k_ (Maybe.unsafe-from (last &nk))
        k (Maybe.unsafe-from k_)
        a (getnums)
        x_ (Maybe.unsafe-from (nth &a 0))
        x (Maybe.unsafe-from x_)
       ]
  (do
    (print &(Int.str (+ n 0)))
    (println " ")
    (print &(Int.str (+ k 0)))
    (println " ")
    (print &(Int.str (+ x 0)))
    (println " ")
     
  )
  )
)

--

(defn solve [n k a i]
    (let
        (if (< i n)
            [
            x_ (Maybe.unsafe-from (nth &a i))
            x (Maybe.unsafe-from x_)
            ]
        )
        (do
            (print &(Int.str (+ x 0)))
            (println " ")
        )
    )
)


(defn solve [n k a i]
    (let [
        x_ (Maybe.unsafe-from (nth &a 0))
        x (Maybe.unsafe-from x_)
        ]
        (if (< i n)
            let[
                x_ (Maybe.unsafe-from (nth &a i))
                x (Maybe.unsafe-from x_)
            ]
            (print &(Int.str (+ x 0)))
            (println " ")
        )
    )
)

--
loopまでできた
(use IO)
(use String)
(use Int)
(use Array)

(defn getnums []
  (let [ss (get-line)
        s (words &ss)
        nums (copy-map &Int.from-string &s)]
   nums
  )
)

(defn solve [n k a i]
  (if (< i n)
    (let [x_ (Maybe.unsafe-from (nth &a i))
          x (Maybe.unsafe-from x_)]
      (do
        (print &(Int.str (+ x 0)))
        (println " ")
        (solve n k a (inc i))
      )
    )
  )
)


(defn main []
  (let [
        nk (getnums)
        n_ (Maybe.unsafe-from (first &nk))
        n (Maybe.unsafe-from n_)
        k_ (Maybe.unsafe-from (last &nk))
        k (Maybe.unsafe-from k_)
        a (getnums)
        x_ (Maybe.unsafe-from (nth &a 0))
        x (Maybe.unsafe-from x_)
       ]
  (do
    (print &(Int.str (+ n 0)))
    (println " ")
    (print &(Int.str (+ k 0)))
    (println " ")
    (print &(Int.str (+ x 0)))
    (println " ")
    (solve n k a 0)
  )
  )
)
